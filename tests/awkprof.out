	# gawk-Profil, erzeugt Wed Feb 10 15:04:33 2016

	# BEGIN Regel(n)

	BEGIN {
     1  	OFS = ""
	}

	# Regel(n)

    11  /^[ \t]*$/ { # 4
     4  	if (current_block ~ /indented_code_block/) { # 1
     1  		sub(/^( |  |   |    |\t| \t|  \t|   \t)/, "", $0)
     1  		blank_lines = blank_lines $0 "\n"
     3  	} else {
     3  		if (current_block ~ /paragraph|html_block_[67]/) { # 3
     3  			close_block()
			} else {
				if (current_block ~ /html_block_[1-5]/) {
					text = text "\n" $0
				} else {
					if (current_block ~ /fenced_code_block/) {
						add_fenced_code_block_line()
					}
				}
			}
		}
     4  	next
	}

     7  current_block ~ /paragraph/ && /^( |  |   )?(==*|--*) *$/ {
		heading_level = ($0 ~ /=/ ? 1 : 2)
		current_block = ""
		close_block()
		setext_heading_out()
		next
	}

     7  /^( |  |   )?(\* *\* *\* *(\* *)*|- *- *- *(- *)*|_ *_ *_ *(_ *)*) *$/ {
		close_block()
		thematic_break_out()
		next
	}

     7  /^( |  |   )?(#|##|###|####|#####|######)( .*)?$/ {
		close_block()
		text = $0
		match(text, /##*/)
		heading_level = RLENGTH
		sub(/  *#* *$/, "", text)
		sub(/^ *#* */, "", text)
		atx_heading_out()
		next
	}

     7  current_block ~ /indented_code_block/ && (sub(/^(    |\t| \t|  \t|   \t)/, "", $0)) { # 2
     2  	text = text blank_lines $0 "\n"
     2  	blank_lines = ""
     2  	next
	}

     5  current_block !~ /paragraph|fenced_code_block|html_block/ && (sub(/^(    |\t| \t|  \t|   \t)/, "", $0)) { # 1
     1  	current_block = "indented_code_block"
     1  	text = $0 "\n"
     1  	next
	}

     4  current_block !~ /fenced_code_block|html_block/ && /^( |  |   )?(````*[^`]*|~~~~*[^~]*)$/ {
		match($0, /(``*|~~*)/)
		close_block()
		current_block = "fenced_code_block"
		fence_character = substr($0, RSTART, 1)
		fence_length = RLENGTH
		match($0, /^ */)
		fence_indent = RLENGTH
		info_string = $0
		sub(/^ *(``*|~~*) */, "", info_string)
		sub(/ *$/, "", info_string)
		text = ""
		split(info_string, info_string_words, FS)
		fence_lang = info_string_words[1]
		next
	}

     4  current_block ~ /fenced_code_block/ && /^( |  |   )?(````* *|~~~~* *)$/ {
		match($0, /(``*|~~*)/)
		if (substr($0, RSTART, 1) == fence_character && RLENGTH >= fence_length) {
			close_block()
			next
		}
	}

     4  current_block ~ /fenced_code_block/ {
		add_fenced_code_block_line()
		next
	}

     4  current_block !~ /html_block/ && /^( |  |   )?<([sS][cC][rR][iI][pP][tT]|[pP][rR][eE]|[sS][tT][yY][lL][eE])([ \t].*|>.*)?$/ {
		close_block()
		current_block = "html_block_1"
		text = ""
	}

     4  current_block ~ /html_block_1/ && /<\/([sS][cC][rR][iI][pP][tT]|[pP][rR][eE]|[sS][tT][yY][lL][eE])>/ {
		html_add_line_and_close()
		next
	}

     4  current_block !~ /html_block/ && /^( |  |   )?<!--/ {
		close_block()
		current_block = "html_block_2"
		text = ""
	}

     4  current_block ~ /html_block_2/ && /-->/ {
		html_add_line_and_close()
		next
	}

     4  current_block !~ /html_block/ && /^( |  |   )?<\?/ {
		close_block()
		current_block = "html_block_3"
		text = ""
	}

     4  current_block ~ /html_block_3/ && /\?>/ {
		html_add_line_and_close()
		next
	}

     4  current_block !~ /html_block/ && /^( |  |   )?<!/ {
		close_block()
		current_block = "html_block_4"
		text = ""
	}

     4  current_block ~ /html_block_4/ && />/ {
		html_add_line_and_close()
		next
	}

     4  current_block !~ /html_block/ && /^( |  |   )<!\[CDATA\[/ {
		close_block()
		current_block = "html_block_5"
		text = $0
		next
	}

     4  current_block ~ /html_block_5/ && /\]\]>/ {
		html_add_line_and_close()
		next
	}

     4  current_block !~ /html_block/ && /^( |  |   )?<\/?([aA][dD][dD][rR][eE][sS][sS]|[aA][rR][tT][iI][cC][lL][eE]|[aA][sS][iI][dD][eE]|[bB][aA][sS][eE]|[bB][aA][sS][eE][fF][oO][nN][tT]|[bB][lL][oO][cC][kK][qQ][uU][oO][tT][eE]|[bB][oO][dD][yY]|[cC][aA][pP][tT][iI][oO][nN]|[cC][eE][nN][tT][eE][rR]|[cC][oO][lL]|[cC][oO][lL][gG][rR][oO][uU][pP]|[dD][dD]|[dD][iI][aA][lL][oO][gG]|[dD][iI][rR]|[dD][iI][vV]|[dD][lL]|[dD][tT]|[fF][iI][eE][lL][dD][sS][eE][tT]|[fF][iI][gG][cC][aA][pP][tT][iI][oO][nN]|[fF][iI][gG][uU][rR][eE]|[fF][oO][oO][tT][eE][rR]|[fF][oO][rR][mM]|[fF][rR][aA][mM][eE]|[fF][rR][aA][mM][eE][sS][eE][tT]|[hH]1|[hH][eE][aA][dD]|[hH][eE][aA][dD][eE][rR]|[hH][rR]|[hH][tT][mM][lL]|[iI][fF][rR][aA][mM][eE]|[lL][eE][gG][eE][nN][dD]|[lL][iI]|[lL][iI][nN][kK]|[mM][aA][iI][nN]|[mM][eE][nN][uU]|[mM][eE][nN][uU][iI][tT][eE][mM]|[mM][eE][tT][aA]|[nN][aA][vV]|[nN][oO][fF][rR][aA][mM][eE][sS]|[oO][lL]|[oO][pP][tT][gG][rR][oO][uU][pP]|[oO][pP][tT][iI][oO][nN]|[pP]|[pP][aA][rR][aA][mM]|[sS][eE][cC][tT][iI][oO][nN]|[sS][oO][uU][rR][cC][eE]|[sS][uU][mM][mM][aA][rR][yY]|[tT][aA][bB][lL][eE]|[tT][bB][oO][dD][yY]|[tT][dD]|[tT][fF][oO][oO][tT]|[tT][hH]|[tT][hH][eE][aA][dD]|[tT][iI][tT][lL][eE]|[tT][rR]|[tT][rR][aA][cC][kK]|[uU][lL])([ \t]+.*|\/?>.*)?$/ { # 4
     4  	close_block()
     4  	current_block = "html_block_6"
     4  	text = $0
     4  	next
	}

	current_block !~ /html_block|paragraph/ && /^( |  |   )?(<[a-zA-Z][a-zA-Z0-9-]*([ \t]+[a-zA-Z_:][a-zA-Z0-9_.:-]*([ \t]*=[ \t]*([^"'=<>`]+|'[^']*'|"[^"]*"))?)*[ \t]*\/?>|<\/[a-zA-Z][a-zA-Z0-9-]*[ \t]*>)[ \t]*$/ {
		close_block()
		current_block = "html_block_7"
		text = $0
		next
	}

	current_block ~ /html_block/ {
		text = (text ? text "\n" $0 : $0)
		next
	}

	current_block ~ /paragraph/ {
		sub(/^ */, "", $0)
		sub(/ *$/, "", $0)
		text = text "\n" $0
		next
	}

	{
		close_block()
		current_block = "paragraph"
		sub(/^ */, "", $0)
		sub(/ *$/, "", $0)
		text = $0
	}

	# END Regel(n)

	END {
     1  	close_blocks()
	}


	# Funktionen in alphabetischer Reihenfolge

	function add_fenced_code_block_line()
	{
		for (i = fence_indent; i > 0 && (sub(/^ /, "", $0)); i--) {
		}
		text = text $0 "\n"
	}

	function atx_heading_out()
	{
		print "<h", heading_level, ">", text, "</h", heading_level, ">"
	}

     8  function close_block()
	{
     8  	if (current_block ~ /code_block/) { # 1
     1  		code_block_out()
     7  	} else {
     7  		if (current_block ~ /paragraph/) {
				paragraph_out()
     7  		} else {
     7  			if (current_block ~ /html_block/) { # 4
     4  				html_block_out()
				}
			}
		}
     8  	current_block = ""
	}

     1  function close_blocks()
	{
     1  	close_block()
	}

     1  function code_block_out()
	{
     1  	if (fence_lang) {
			print "<pre><code class=\"language-", fence_lang, "\">", text, "</code></pre>"
     1  	} else {
     1  		print "<pre><code>", text, "</code></pre>"
		}
	}

	function html_add_line_and_close()
	{
		text = (text ? text "\n" $0 : $0)
		close_block()
	}

     4  function html_block_out()
	{
     4  	print text
	}

	function paragraph_out()
	{
		print "<p>", text, "</p>"
	}

	function setext_heading_out()
	{
		print "<h" heading_level, ">", text, "</h", heading_level, ">"
	}

	function thematic_break_out()
	{
		print "<hr />"
	}
